
import vertexai

import sys

from schema.schemas import LogDataSchema

from IPython.display import Markdown, display
from google import genai
from google.genai.types import GenerateContentConfig

import os

PROJECT_ID = "agenticai-466913"  
if not PROJECT_ID or PROJECT_ID == "[your-project-id]":
    PROJECT_ID = str(os.environ.get("GOOGLE_CLOUD_PROJECT"))

LOCATION = os.environ.get("GOOGLE_CLOUD_REGION", "us-central1")

client = genai.Client(vertexai=True , project=PROJECT_ID, location=LOCATION)
#enabling VaertexAi
print(client,PROJECT_ID,LOCATION)

MODEL_ID = "gemini-2.0-flash-001"

from google import genai
from google.genai import types
import base64

from vertexai.generative_models import (
    GenerationConfig,
    GenerativeModel,
    HarmBlockThreshold,
    HarmCategory,
    Image,
    Part,
    SafetySetting,
)

from google.genai.types import FunctionDeclaration, GenerateContentConfig, Part, Tool, Schema
import requests

API_KEY = "" #if required and pass it to the url
# make sure to define return type
def get_log_data(
    location: str,
    severity: str,
):
  url= ()
  params = {
      "location": location,
      "severity": severity,
  }
  try:
     validated = LogDataSchema(
        location=location,
        severity=severity,
        )
  except Exception as e :
     return jsonify({"error": str(e)}), 400
  # Filter out None values from parameters not required as of now as both ar required fields
  # params = {k: v for k, v in params.items() if v is not None}
  try:
    response= requests.get(url,params=validated, headers={"User-Agent": "none"}) # gets the data
    response.raise_for_status()
    data = response.json()
    return data
  except requests.RequestException as e :
    print(f"Error: {e}")
    return None

def get_total_count_data(
    location: str,
    severity: str,
):
   url= ()
   params = {
      "location": location,
      "severity": severity,
    }
   params = {k: v for k, v in params.items() if v is not None}
   try:
    response= requests.get(url,params=params, headers={"User-Agent": "none"}) # gets the data
    response.raise_for_status()
    data = response.json()
    return len(data)
   except requests.RequestException as e :  
    print(f"Error: {e}")
    return None

def get_incident_location(
    incident_description: str
):
  url= ()
  params = {
        "incident_description": incident_description
  }
  params = {k: v for k, v in params.items() if v is not None}
  try:
        response = requests.get(url)
        response.raise_for_status()
        incidents = response.json()
        for incident in incidents:
            if incident["area"].lower() in incident_description.lower():
                return {
                    "area": incident["area"],
                    "lat": incident["lat"],
                    "lon": incident["lon"],
                    "severity": incident["severity"]
                }
        return {"error": "Location not found in database"}
  except requests.RequestException as e :
    print(f"Error: {e}")   
    return None
      


get_log_data = FunctionDeclaration(
          name="get_log_data",
          description="summarizes security concerns",
          parameters={
              "type": "OBJECT",
              "properties": {
                  "location": {"type": "STRING", "description": "the zone or location to summarize"},
                  "severity": {"type": "STRING","enum": ["low", "medium", "high"], "description": "the severity level of concern"},
              },
              "required": ["location", "severity"],
          },
      )

get_total_count_data = FunctionDeclaration(
          name="get_total_count_data",
          description="returns the total count of security concerns of a particular severity or severities in a particular location or locations",
          parameters={
              "type": "OBJECT",
              "properties": {
                  "location": {"type": "STRING", "description": "the zone or location to summarize"},
                  "severity": {"type": "STRING","enum": ["low", "medium", "high"], "description": "the severity level of concern"},
              },
              "required": ["location", "severity"],
          },
      )

get_incident_location = FunctionDeclaration(
    name="get_incident_location",
    description="Returns structured location data (lat/lon or area name) from a reported incident",
    parameters={
        "type": "OBJECT",
        "properties": {
            "incident_description": {"type": "STRING", "description": "Description of the incident, e.g., 'Heart attack at Mall 47'"}
        },
        "required": ["incident_description"]
    }
)

get_nearest_response_unit = FunctionDeclaration(
    name="get_nearest_response_unit",
    description="Finds the nearest available response unit to a location",
    parameters={
        "type": "OBJECT",
        "properties": {
            "latitude": {"type": "NUMBER"},
            "longitude": {"type": "NUMBER"},
            "unit_type": {
                "type": "STRING",
                "enum": ["hospital", "fire station", "police station"],
                "description": "Type of response unit needed"
            }
        },
        "required": ["latitude", "longitude", "unit_type"]
    }
)


tools = [Tool(function_declarations=[
  get_log_data, # required done
  get_total_count_data, #required done
  get_incident_location, #required done
  get_nearest_response_unit, #required done
  ])]

def generate(prompt):

  client = genai.Client(
      vertexai=True , project=PROJECT_ID, location=LOCATION
      )
  model_name = "gemini-2.0-flash-001"

  prompt= prompt

  contents = [
      Part.from_text(text =
            "You are an expert in summarizing security concerns in large public events. "
            "Provide concise situational summaries using data provided by the user."
      ),
      Part.from_text(text=prompt)
  ]


  #safety settings
  safety = [
      types.SafetySetting(
          category="HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold="BLOCK_MEDIUM_AND_ABOVE"
      ),
      types.SafetySetting(
          category="HARM_CATEGORY_HATE_SPEECH",
          threshold="BLOCK_LOW_AND_ABOVE"
      ),
      types.SafetySetting(
          category="HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold="BLOCK_LOW_AND_ABOVE"
      ),
    ]

  response = client.models.generate_content(
      model=model_name,
      contents=contents, #add the prompt in the contents along side the few shot prompting
      config=GenerateContentConfig(
          tools=tools,
          temperature=0,
          top_p=0.95,
          max_output_tokens=200,
          safetySettings=safety,
          ),
  )

  return response.text


from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/generate', methods=['POST'])
def generate_endpoint():
    data = request.get_json()
    prompt = data.get('prompt', '')
    result = generate(prompt)
    return jsonify({"result": result})

